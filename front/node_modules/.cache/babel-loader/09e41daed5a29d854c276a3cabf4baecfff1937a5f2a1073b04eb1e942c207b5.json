{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Наш хук\nexport default function useDebounce(value, delay) {\n  _s();\n  // Состояние и сеттер для отложенного значения\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    // Выставить debouncedValue равным value (переданное значение) \n    // после заданной задержки\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    console.log(1);\n\n    // Вернуть функцию очистки, которая будет вызываться каждый раз, когда ...\n    // ... useEffect вызван снова. useEffect будет вызван снова, только если ...\n    // ... value будет изменено (смотри ниже массив зависимостей).\n    // Так мы избегаем изменений debouncedValue, если значение value ...\n    // ... поменялось в рамках интервала задержки.\n    // Таймаут очищается и стартует снова.\n    // Что бы сложить это воедино: если пользователь печатает что-то внутри ...\n    // ... нашего приложения в поле поиска, мы не хотим, чтобы debouncedValue...\n    // ... не менялось до тех пор, пока он не прекратит печатать дольше, чем 500ms.\n    return () => {\n      clearTimeout(handler);\n    };\n  },\n  // Вызывается снова, только если значение изменится\n  // мы так же можем добавить переменную \"delay\" в массива зависимостей ...\n  // ... если вы собираетесь менять ее динамически.\n  [value]);\n  return debouncedValue;\n}\n_s(useDebounce, \"KDuPAtDOgxm8PU6legVJOb3oOmA=\");","map":{"version":3,"names":["React","useState","useEffect","useDebounce","value","delay","_s","debouncedValue","setDebouncedValue","handler","setTimeout","console","log","clearTimeout"],"sources":["C:/Users/Abobadance/diplom/front/src/hooks/useDebounce.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n// Наш хук\r\nexport default function useDebounce(value, delay) {\r\n  // Состояние и сеттер для отложенного значения\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(\r\n    () => {\r\n      // Выставить debouncedValue равным value (переданное значение) \r\n      // после заданной задержки\r\n      const handler = setTimeout(() => {\r\n        setDebouncedValue(value);\r\n      }, delay);\r\n\r\n      console.log(1);\r\n\r\n      // Вернуть функцию очистки, которая будет вызываться каждый раз, когда ...\r\n      // ... useEffect вызван снова. useEffect будет вызван снова, только если ...\r\n      // ... value будет изменено (смотри ниже массив зависимостей).\r\n      // Так мы избегаем изменений debouncedValue, если значение value ...\r\n      // ... поменялось в рамках интервала задержки.\r\n      // Таймаут очищается и стартует снова.\r\n      // Что бы сложить это воедино: если пользователь печатает что-то внутри ...\r\n      // ... нашего приложения в поле поиска, мы не хотим, чтобы debouncedValue...\r\n      // ... не менялось до тех пор, пока он не прекратит печатать дольше, чем 500ms.\r\n      return () => {\r\n        clearTimeout(handler);\r\n      };\r\n    },\r\n    // Вызывается снова, только если значение изменится\r\n    // мы так же можем добавить переменную \"delay\" в массива зависимостей ...\r\n    // ... если вы собираетесь менять ее динамически.\r\n    [value]\r\n  );\r\n\r\n  return debouncedValue;\r\n}"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AACA,eAAe,SAASC,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAAAC,EAAA;EAChD;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAACG,KAAK,CAAC;EAE3DF,SAAS,CACP,MAAM;IACJ;IACA;IACA,MAAMO,OAAO,GAAGC,UAAU,CAAC,MAAM;MAC/BF,iBAAiB,CAACJ,KAAK,CAAC;IAC1B,CAAC,EAAEC,KAAK,CAAC;IAETM,OAAO,CAACC,GAAG,CAAC,CAAC,CAAC;;IAEd;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAO,MAAM;MACXC,YAAY,CAACJ,OAAO,CAAC;IACvB,CAAC;EACH,CAAC;EACD;EACA;EACA;EACA,CAACL,KAAK,CACR,CAAC;EAED,OAAOG,cAAc;AACvB;AAACD,EAAA,CAlCuBH,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}